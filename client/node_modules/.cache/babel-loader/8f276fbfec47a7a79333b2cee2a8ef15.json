{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FosterOgwudu\\\\Desktop\\\\MyProjects\\\\MusicFest\\\\client\\\\src\\\\components\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './Search.css';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Avatar } from '@material-ui/core';\nimport { useStateValue } from '../utilities/StateProvider';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport TrackSearchResult from './TrackSearchResult';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotify = new SpotifyWebApi();\nexport default function Search() {\n  _s();\n\n  var _user$images$;\n\n  const [{\n    user,\n    token\n  }, dispatch] = useStateValue();\n  const [search, setSearch] = useState();\n  const [search__result, setSearch__result] = useState([]);\n  console.log('serachResult is ', search__result);\n  useEffect(() => {\n    if (token) {\n      spotify.setAccessToken(token);\n    }\n  }, [token]);\n  useEffect(() => {\n    if (!search) {\n      setSearch__result([]);\n    }\n\n    let cancel = false;\n\n    if (search && token) {\n      spotify.searchTracks(search).then(res => {\n        if (cancel) return;\n        setSearch__result(res.tracks.items.map(track => {\n          //getting smallest image for albumUrl\n          const smallest__height = Math.min.apply(Math, track.album.images.map(image => {\n            return image.height;\n          }));\n          const smallest__album__image = track.album.images.filter(image);\n          console.log('smallest', smallestAlbumImage);\n          console.log('there is search');\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallest__album__image.url\n          };\n        }));\n      });\n    } //canceling a search if there is another search (good for performance)\n\n\n    return () => {\n      cancel = true;\n    };\n  }, [token, search]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search__head\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search__left\",\n        children: [/*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Search for Artists, Songs, or Albums\",\n          type: \"text\",\n          onChange: e => {\n            setSearch(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search__right\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          src: user === null || user === void 0 ? void 0 : (_user$images$ = user.images[0]) === null || _user$images$ === void 0 ? void 0 : _user$images$.url,\n          alt: \"FO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: user === null || user === void 0 ? void 0 : user.display_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search__body\",\n      children: search__result.map(track => {\n        /*#__PURE__*/\n        _jsxDEV(TrackSearchResult, {\n          track: track\n        }, track.uri, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 22\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Search, \"IhiWcjs1ba/1RQspF67h8563m7U=\", false, function () {\n  return [useStateValue];\n});\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/FosterOgwudu/Desktop/MyProjects/MusicFest/client/src/components/Search.js"],"names":["React","useState","useEffect","SearchIcon","Avatar","useStateValue","SpotifyWebApi","TrackSearchResult","spotify","Search","user","token","dispatch","search","setSearch","search__result","setSearch__result","console","log","setAccessToken","cancel","searchTracks","then","res","tracks","items","map","track","smallest__height","Math","min","apply","album","images","image","height","smallest__album__image","filter","smallestAlbumImage","artist","artists","name","title","uri","albumUrl","url","e","target","value","display_name"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport './Search.css'\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport {Avatar} from '@material-ui/core'\r\nimport { useStateValue } from '../utilities/StateProvider';\r\nimport SpotifyWebApi from \"spotify-web-api-js\";\r\nimport TrackSearchResult from './TrackSearchResult';\r\n\r\nconst spotify = new SpotifyWebApi();\r\nexport default function Search() {\r\n    const [{user,token}, dispatch] = useStateValue();\r\n    const [search, setSearch] = useState()\r\n    const [search__result, setSearch__result] = useState([])\r\n    console.log('serachResult is ', search__result)\r\n\r\n\r\n    useEffect(() => {\r\n        if(token){\r\n            spotify.setAccessToken(token); \r\n        }\r\n    }, [token])\r\n\r\n    useEffect(() => {\r\n    if(!search){\r\n        setSearch__result([])\r\n    }\r\n    let cancel = false\r\n    if(search && token){\r\n    \r\n    \r\n    spotify.searchTracks(search).then((res) =>{\r\n        if (cancel) return\r\n             setSearch__result( res.tracks.items.map((track) =>{\r\n            //getting smallest image for albumUrl\r\n            const smallest__height = Math.min.apply(Math, track.album.images.map((image) => {return image.height}));\r\n            const smallest__album__image = track.album.images.filter(image)\r\n               console.log('smallest', smallestAlbumImage)  \r\n    console.log('there is search')\r\n           return {\r\n               artist: track.artists[0].name,\r\n               title: track.name,\r\n               uri : track.uri,\r\n               albumUrl: smallest__album__image.url\r\n               \r\n           }\r\n        }))\r\n            \r\n        \r\n       })\r\n     \r\n    }\r\n\r\n   //canceling a search if there is another search (good for performance)\r\n    return() => {cancel = true}\r\n    }, [token, search])\r\n    \r\n\r\n    return (\r\n        <div className= 'search'> \r\n            <div className=\"search__head\">\r\n                <div className=\"search__left\">\r\n                        <SearchIcon/>\r\n                        <input placeholder= 'Search for Artists, Songs, or Albums' type = 'text' onChange={e =>{setSearch(e.target.value)}}/>\r\n                </div>\r\n            <   div className=\"search__right\">\r\n                        <Avatar src={user?.images[0]?.url} alt='FO'/>\r\n                        <h4>{user?.display_name}</h4>\r\n                </div> \r\n            </div>\r\n            \r\n            <div className=\"search__body\">\r\n                {search__result.map(track => {\r\n                     <TrackSearchResult  track={track} key={track.uri}/>\r\n                })}\r\n               \r\n            </div>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}