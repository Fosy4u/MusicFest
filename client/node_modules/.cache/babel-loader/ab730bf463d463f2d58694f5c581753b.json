{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FosterOgwudu\\\\Desktop\\\\MyProjects\\\\MusicFest\\\\client\\\\src\\\\components\\\\AppLaunch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Body from './Body';\nimport Footer from './Footer';\nimport './AppLaunch.css';\nimport Sidebar from './Sidebar';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport Home from './Home';\nimport UseAuth from './UseAuth';\nimport SpotifyWebApi from \"spotify-web-api-js\";\nimport { useStateValue } from '../utilities/StateProvider';\nimport Search from './Search';\nimport { useHistory } from \"react-router-dom\";\nimport Player from './Player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotify = new SpotifyWebApi({\n  clientId: '7c94905bdafb43209c0f2b19bdcedb5e'\n});\nexport default function AppLaunch({\n  code,\n  spotify\n}) {\n  _s();\n\n  const [{\n    user,\n    token,\n    playlists,\n    active_playlist,\n    track\n  }, dispatch] = useStateValue();\n  const accessToken = UseAuth(code);\n  console.log('Access token is', accessToken);\n  const history = useHistory();\n  useEffect(() => {\n    if (accessToken) {\n      //set access token for the spotiywebAPI\n      spotify.setAccessToken(accessToken);\n      dispatch({\n        type: 'SET_TOKEN',\n        payload: accessToken\n      });\n    } else {\n      history.push('/');\n    }\n  }, [accessToken]);\n  useEffect(() => {\n    if (token) {\n      //get user with spotifywebAPI\n      spotify.getMe().then(user => {\n        console.log('ðŸ§”', user);\n        dispatch({\n          type: 'SET_USER',\n          payload: user\n        });\n      }); //get playlsits with spotifywebAPI\n\n      spotify.getUserPlaylists().then(playlists => dispatch({\n        type: 'SET_PLAYLISTS',\n        payload: playlists\n      }));\n    }\n  }, [token, track]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player_body\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        component: Home\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/body\",\n        component: () => /*#__PURE__*/_jsxDEV(Body, {\n          spotify: spotify\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/search\",\n        component: Search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }, this), track ? /*#__PURE__*/_jsxDEV(Player, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 18\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AppLaunch, \"iDLc6YfU6dVzbL+IFbDlsoVqS/I=\", false, function () {\n  return [useStateValue, useHistory];\n});\n\n_c = AppLaunch;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppLaunch\");","map":{"version":3,"sources":["C:/Users/FosterOgwudu/Desktop/MyProjects/MusicFest/client/src/components/AppLaunch.js"],"names":["React","useEffect","Body","Footer","Sidebar","Link","Route","Switch","Home","UseAuth","SpotifyWebApi","useStateValue","Search","useHistory","Player","spotify","clientId","AppLaunch","code","user","token","playlists","active_playlist","track","dispatch","accessToken","console","log","history","setAccessToken","type","payload","push","getMe","then","getUserPlaylists"],"mappings":"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","sourcesContent":["import React,{useEffect} from 'react'\r\nimport Body from './Body'\r\nimport Footer from './Footer'\r\nimport './AppLaunch.css'\r\nimport Sidebar from './Sidebar';\r\nimport { Link, Route, Switch } from 'react-router-dom';\r\nimport Home from './Home';\r\nimport UseAuth from './UseAuth';\r\nimport SpotifyWebApi from \"spotify-web-api-js\";\r\nimport { useStateValue } from '../utilities/StateProvider';\r\nimport Search from './Search';\r\nimport { useHistory } from \"react-router-dom\"\r\nimport Player from './Player';\r\n\r\n\r\nconst spotify = new SpotifyWebApi({\r\n    clientId: '7c94905bdafb43209c0f2b19bdcedb5e'\r\n  });\r\n\r\nexport default function AppLaunch({code, spotify}) {\r\n    const [{user,token, playlists, active_playlist, track}, dispatch] = useStateValue();\r\n    const accessToken = UseAuth(code)\r\n    console.log('Access token is', accessToken)\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        if(accessToken){\r\n            //set access token for the spotiywebAPI\r\n          spotify.setAccessToken(accessToken);\r\n            dispatch({\r\n              type: 'SET_TOKEN',\r\n              payload : accessToken\r\n            });\r\n            \r\n          \r\n            }\r\n            else{\r\n                history.push('/')\r\n            }\r\n        \r\n    }, [accessToken])\r\n\r\n        useEffect(() => {\r\n            \r\n        if (token){\r\n            //get user with spotifywebAPI\r\n          spotify.getMe().then((user) => {console.log('ðŸ§”', user ); \r\n          dispatch({\r\n          type: 'SET_USER',\r\n          payload: user\r\n        })})\r\n      //get playlsits with spotifywebAPI\r\n        spotify.getUserPlaylists().then ((playlists) => \r\n        dispatch({\r\n          type : 'SET_PLAYLISTS',\r\n          payload: playlists\r\n      \r\n        }))\r\n        }    \r\n        }, [token, track])\r\n    return (\r\n        <div className='player'>\r\n            <div className='player_body'>\r\n        {/*sidebar*/}\r\n        <Sidebar/>\r\n\r\n         {/*body*/}\r\n        <Route exact={true} path=\"/\" component={Home} />\r\n        <Route path=\"/body\" component={() => <Body spotify = {spotify}/>} />\r\n        <Route path=\"/search\" component={Search} />\r\n                    \r\n         \r\n            </div>\r\n         \r\n         {/*footer*/}\r\n         <div className></div>\r\n         {track? <Player /> :null}\r\n           \r\n         </div>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}